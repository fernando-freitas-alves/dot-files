#!/usr/bin/env bash

__name="i3flip"
__version="0.009"
__author="budRich"
__contact='robstenklippa@gmail.com'
__created="2018-01-03"
__updated="2018-09-01"


main(){

  eval set -- "$(getopt --name "$__name" \
    --options vh:: \
    --longoptions version,help::,debug: \
    -- "$@"
  )"

  while true; do
    case "$1" in
      -v | --version ) printinfo version  ; exit ;;
      -h | --help    ) printinfo "${2:-}" ; exit ;;
      -- ) shift ; break ;;
      *  ) break ;;
    esac
  done

  __dir="$1"

  __dir=${__dir,,}
  __dir=${__dir:0:1}

  # "$__dir not valid direction"
  [[ ! $__dir =~ u|r|l|d|n|p ]] \
    && ERX "$1 is not a valid direction"

  case "$__dir" in
    r|d ) __dir=n ;;
    l|u ) __dir=p ;;
  esac

  declare -A __acur

  eval "$(getcurrent)"
  
  __orgtrg="$(gettarget)"

  [[ ! ${__acur[layout]:-} =~ tabbed|stacked ]] && {

    i3-msg -q focus parent
    eval "$(getcurrent)"

    [[ ! ${__acur[layout]:-} =~ tabbed|stacked ]] && {
      i3-msg -q "[con_id=$__orgtrg]" focus
      exit
    }

    __orgtrg="$(gettarget)"
  }

  ((__acur[total]==1)) && exit

  i3-msg -q "[con_id=$__orgtrg]" focus, focus child
}


gettarget(){
  local trg

  [[ $__dir = n ]] \
    && trg=$((__acur[position]==__acur[total]
              ? 1
              : __acur[position]+1
            )) \
    || trg=$((__acur[position]==1
              ? __acur[total]
              : __acur[position]-1
            ))

  aord=(${__acur[order]:-})
  echo "${aord[$((trg-1))]}"
}


getcurrent(){
  i3-msg -t get_tree \
  | awk -v RS=',' -F':' -v crit='"focused"' -v srch="true" '
      BEGIN{fid="0";nid="0";nfo="0";nwi}

      $1~"{\"id\"" || $2~"\"id\"" {
        nwi=nwi+1;cid=$NF;aid[nwi]=cid}
      $1 ~ crit && $2 ~ srch  {fid=cid}
      $2 ~ crit && $3 ~ srch  {fid=cid}

      $1=="\"layout\"" {alo[cid]=$2}

      fid!="0" && $1=="\"focus\"" && $2~fid {focs=1}
      focs=="1" && $NF~"[]]$"{end=1}
      focs=="1" {gsub("[]]|[[]","",$NF);afo=$NF"|"afo;nfo++}
      end=="1" {
        j=nfo

        for (i=nwi;i>0;i--){
          if(fin==1){plo=alo[aid[i]];parid=aid[i];break}
          if(aid[i]==fid){n=j}
          if(afo ~ aid[i]){ord=aid[i]" "ord;--j}
          
          if(j==0){fin=1}
        }
        gsub("[\"]","",plo)

        print "__acur[position]=" n
        print "__acur[total]="    nfo
        print "__acur[layout]="   plo
        sub(/[[:space:]]*$/,"",ord)
        print "__acur[order]=\""  ord "\""
        print "__acur[parent]="   parid
        print "__acur[focused]="  fid

        exit
      } 
    '
}


printinfo(){
  local about bouthead boutfoot

about=\
'`i3flip` - Tabswitching done right

SYNOPSIS
--------

`i3flip` `-v`|`-h`    
`i3flip` n|r|d|next|right|down   
`i3flip` p|l|u|prev|left|up   

DESCRIPTION
-----------

`i3flip` switch containers without leaving the
parent. Perfect for tabbed or stacked layout, but
works on all layouts. If direction is `next` (or
`n`) and the active container is the last, the
first container will be activated.  

OPTIONS
-------

`-v`|`--version`  
Show version and exit.  

`-h`|`--help`  
Show help and exit.  


EXAMPLE
-------

Put these keybinding definitions in the i3 config.  

`~/.config/i3/config`:  
``` text
bindsym Mod4+Tab         exec --no-startup-id i3flip next
bindsym Mod4+Shift+Tab   exec --no-startup-id i3flip prev
```

Mod4/Super/Windows+Tab will switch to the next tab.

'
bouthead="
${__name^^} 1 ${__updated} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${__author} <${__contact}>
<https://budrich.github.io>

SEE ALSO
--------

i3(1)
"

  case "$1" in
    # print version info to stdout
    version )
      printf '%s\n' \
        "$__name - version: $__version" \
        "updated: $__updated by $__author"
      exit
      ;;
    # print help in markdown format to stdout
    md ) printf '%s' "# ${about}" ;;

    # print help in markdown format to README.md
    mdg ) printf '%s' "# ${about}" > "${__dir}/README.md" ;;
    
    # print help in troff format to __dir/__name.1
    man ) 
      printf '%s' "${bouthead}" "${about}" "${boutfoot}" \
      | go-md2man > "${__dir}/${__name}.1"
    ;;

    # print help to stdout
    * ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

ERR(){ >&2 echo "[WARNING]" "$*"; }
ERX(){ >&2 echo "[ERROR]" "$*" && exit 1 ; }

init(){
  set -o errexit
  set -o pipefail
  set -o nounset
  # set -o xtrace

  __source="$(readlink -f "${BASH_SOURCE[0]}")"
  __dir="$(cd "$(dirname "${__source}")" && pwd)"
  __file="${__dir}/$(basename "${__source}")"
  __base="$(basename ${__file} .sh)"
  __root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this as it depends on your app
}

init
eval __lastarg="\${$#}"
main "${@}"
